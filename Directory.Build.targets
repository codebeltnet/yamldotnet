<Project>

  <PropertyGroup>
    <PackageReleaseNotesFile>..\..\.nuget\$(MSBuildProjectName)\PackageReleaseNotes.txt</PackageReleaseNotesFile>
  </PropertyGroup>

  <Target Name="PreparePackageReleaseNotesFromFile" BeforeTargets="GenerateNuspec" Condition="'$(IsTestProject)' == 'false' AND Exists('$(PackageReleaseNotesFile)')">
    <ReadLinesFromFile File="$(PackageReleaseNotesFile)">
      <Output TaskParameter="Lines" ItemName="PackageReleaseNotesLines"/>
    </ReadLinesFromFile>
    <PropertyGroup>
      <PackageReleaseNotes>@(PackageReleaseNotesLines, '%0A')</PackageReleaseNotes>
    </PropertyGroup>
  </Target>

  <Target Name="ApplyFileVersion" AfterTargets="MinVer">
    <PropertyGroup>
      <GITHUB_RUN_NUMBER Condition="'$(GITHUB_RUN_NUMBER)' == ''">0</GITHUB_RUN_NUMBER>
      <FileVersion>$(MinVerMajor).$(MinVerMinor).$(MinVerPatch).$(GITHUB_RUN_NUMBER)</FileVersion>
    </PropertyGroup>
  </Target>

  <!-- Had to use this as testing in Visual Studio (both built-in and Resharper) failed with "Could not load file or assembly 'Codebelt.Extensions.YamlDotNet' ..." for .NET Framework. -->
  <!-- However, dotnet test works fine - simply producing a MSB3277 due to the fact that this project is in conflict with one of the SUT that relies on the NuGet equivalent to this project. -->
  <!-- Since assembly redirects is not supported in .NET, this was the workaround that has the least impact (normally this is applied only in CI/CD pipeline).  -->
  <PropertyGroup>
    <MinVerTagPrefix>v</MinVerTagPrefix>
  </PropertyGroup>

</Project>
